The LB Proxy RPM package contains following files:
bin/glite-lb-interlogd
bin/glite-lb-proxy
etc/glite-lb-dbsetup-proxy.sql
etc/init.d/glite-lb-proxy
share/doc/glite-lb-proxy-1.1.1/LICENSE

The LB Proxy RPM package depends on glite-lb-client-interface and
glite-lb-common RPM packages. In addition, a reasonable run-time functionality
depends also on glite-lb-logger and running interlogger.

LB Proxu is supposed to run on RB machine and its outgoing communication goes through
interlogger. As a interlogger could be used that one which is used for any other
logging calls. In fact, using more than one standard interlogger on one machine
has usually not a valid reason. For full LB Proxy functionality you need to
have running LB server (on any location).

LB Proxy install should follow several steps described bellow:

0) LB Proxy RPM package install

1) Create new database in same way as it is done for bkserver.
   Database name: lbproxy
   Grant privileges to user: lbserver
   Database has the same structure as bkserver has (you can use
   sql script etc/glite-lb-dbsetup-proxy.sql to create propper tables).

  For better performance it's recommended to use database backend with
  transactions. It's set up by default, existing database can be migrated
  with etc/glite-lb-dbsetup-migrate2transaction.sql (lb-server package).
 
2) Start servers with scripts from distribution
   /opt/glite/etc/init.d/glite-lb-locallogger start
   /opt/glite/etc/init.d/glite-lb-proxy start

   The glite-lb-locallogger script goes with the glite-lb-logger RPM package.
   and runs locallogger and interlogger as well. This is not neccessary to run
   locallogger if you do not use direct LB server logging calls, so you can
   simply start everythink you need from command line.

   The options to the LB proxy server: 
        -p, --sock           path-name to the local socket
              This is the path prefix for both LB Proxy unix
              sockets. Default value is "/tmp/lb_proxy_".
        -m, --mysql          database connect string
              This has the same functionality as it is described in LB server
              Default value is "lbserver/@localhost:lbproxy".
        -d, --debug          don't run as daemon, additional diagnostics
        -s, --slaves         number of slave servers to fork
        -l, --semaphores     number of semaphores (job locks) to use
        -i, --pidfile        file to store master pid
        --proxy-il-sock      socket to send events to interlogger
              Default value is "/tmp/interlogger.sock".
        --proxy-il-fprefix   file prefix for events
              Default value is "/tmp/notif_events".

4) Test the environment basic functionality:
   # job_reg uses direct access to the bkserver at `hostname -f`:9000
   # and to the LBProxy store socket (env. var EDG_WL_LBPROXY_STORE_SOCK)
   # at once
   ./glite-lb-job_reg -m `hostname -f`:9000 -x -s UserInterface
   # log usertag COLOR = red to the proxy
   ./glite-lb-log_usertag_proxy -s /tmp/lb_proxy_store.sock -j <jobid> -u test -n color -v red
   # and check lbserver values with job_stat
