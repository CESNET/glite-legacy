#!/bin/bash
#
# SysV-style boot script for MyProxy
#
# chkconfig: 345 99 06
# description: MyProxy online credential repository

# source function library
. /etc/rc.d/init.d/functions

### configuration

GLOBUS_SYSCONFIG=${GLOBUS_SYSCONFIG:-/etc/sysconfig/globus}
if [ -f "$GLOBUS_SYSCONFIG" ]; then
    . "$GLOBUS_SYSCONFIG"
fi

GLOBUS_LOCATION=${GLOBUS_LOCATION:-/opt/globus}
if [ ! -d "$GLOBUS_LOCATION" ]; then
  echo "GLOBUS_LOCATION not found"
  exit 1
fi
export GLOBUS_LOCATION
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GLOBUS_LOCATION/lib

GLITE_LOCATION=${GLITE_LOCATION:-/opt/glite}
if [ ! -d "$GLITE_LOCATION" ]; then
  echo "GLITE_LOCATION not found"
  exit 1
fi
export GLITE_LOCATION

# Optional server configuration arguments, defaults shown commented out.
# Any parameter can be overridden in $MYPROXY_SYSCONFIG defined below.
#PORT="-p 7512"
PORT=
#CONFIG=
CONFIG=$GLITE_LOCATION/etc/myproxy-server.conf
#STORE="-s /var/myproxy"
STORE=
#VERBOSE=
VERBOSE=--verbose

MYPROXY_SYSCONFIG=${MYPROXY_SYSCONFIG:-/etc/sysconfig/myproxy}
if [ -f "$MYPROXY_SYSCONFIG" ]; then
    . "$MYPROXY_SYSCONFIG"
fi

### main script

prog="myproxy-server"
MYPROXY=$GLOBUS_LOCATION/sbin/$prog

# check if executable exists
if [ ! -x $MYPROXY ]
then
    echo "ERROR: $MYPROXY not present or not executable"
    exit 2
fi

dn=`
    openssl x509 -noout -subject -in \
	/etc/grid-security/hostcert.pem | sed 's-[^/]*--'
`
test=test-`date +%Y%m%d-%H%M%S`-$$

check_response()
{
    TIMEOUT=5
    check="MYPROXY_SERVER_DN=\"${dn}\" ${GLOBUS_LOCATION}/bin/myproxy-info \
	-s `hostname` $PORT -l $test 2>&1 | grep -i credential > /dev/null"

    (
	perl -e '
	    $SIG{"TTIN"} = "IGNORE";
	    $SIG{"TTOU"} = "IGNORE";
	    setpgrp(0, 0);
	    exec(@ARGV);
	    warn "could not exec $ARGV[0]: $!\n";
	    exit(127);
	' sh -c "$check" &
	ping=$!

	exec 2> /dev/null

	perl -e '
	    sleep('"$TIMEOUT"');
	    kill(-9, '"$ping"');
	' &
	watchdog=$!

	wait $ping
	status=$?
	# the bash kill command does not work properly on process groups
	/bin/kill -9 $watchdog $ping -$ping
	exit $status
    )
}

case $1 in
start)


    # the myproxy-server assumes it is started from inetd if its
    # stdin is connected to a socket; by connecting stdin to /dev/null
    # we avoid problems if stdin happened to be a socket by accident,
    # as observed with actuators in the Lemon fabric monitoring system

    server="'$MYPROXY $PORT -c $CONFIG $STORE $VERBOSE < /dev/null'"

    for i in 1 2 3
    do
        echo -n  $"Starting $prog, attempt $i of 3 :"
	      daemon sh -c "$server" 
        RETVAL=$?
        [ $RETVAL = "0" ] && touch /var/lock/subsys/${prog}
        echo

	      for j in 1 2 3 4 5
	      do
           echo -n $"Checking myproxy response attempt: "
	         echo -n "$j of 5 "  
           sleep 1
           check_response
           RETVAL=$?
           [ $RETVAL = "0" ]  && success && echo  && exit 0
           failure  
           echo
	      done
    done

    echo "ERROR: $prog not responsive - check /var/log/messages"
    exit 1
    ;;
stop)
    echo -n "Shutting down $prog"
    killproc ${prog}
    rc=$?
    rm -f /var/lock/subsys/${prog}
    echo
    exit $rc
    ;;
reload)
    echo "Reconfiguring $prog"

    # as of version v4.2 the myproxy-server rereads its configuration file
    # automatically on changes, so we do not have to do anything, besides
    # ensuring that it actually is running

    $0 status && exit
    $0 restart
    exit
    ;;
restart)
    $0 stop
    $0 start
    exit
    ;;
status)
    if test $UID != 0; then
      /sbin/pidof -o $$ -o %PPID -o $PPID -x ${prog} >/dev/null
      rc=$?
      if test $rc = 0; then
         echo "${prog} is running"
         exit 0
      fi
      echo "${prog} is not running"
      exit 1
    else
      status ${prog}
      rc=$?
      test $rc = 0 || exit $rc

      check_response && exit 0

      echo "ERROR: $prog not responsive!"
      exit 1
    fi
    ;;

*)
    echo "Usage: $0 {start|stop|reload|restart|status|bdii-status}"
    exit 2
esac

