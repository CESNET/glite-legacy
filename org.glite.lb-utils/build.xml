<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Copyright (c) Members of the EGEE Collaboration. 2004 
	See http://eu-egee.org/partners/ for details on the copyright holders
	For license conditions see the license file or http://eu-egee.org/license.html

	Build file for the lb-utils subsystem.
	
	Authors: Joachim Flammer <Joachim.Flammer@cern.ch>		
	Version info: $Id$

	Release: $Name$

	Revision history:
	$Log$
	Revision 1.10  2005/04/17 10:30:50  dimeglio
	Added envset dependency

	Revision 1.9  2005/04/17 10:29:26  dimeglio
	Split module.build from version.properties
	
	Revision 1.8  2004/12/19 19:02:18  dimeglio
	Updated (tag target is not needed anymore)
	
	Revision 1.7  2004/10/25 21:04:05  dimeglio
	New copyright
	
	Revision 1.6  2004/09/29 12:55:17  flammer
	Update of subsystem template.
	
	Revision 1.5  2004/07/20 16:08:02  flammer
	Changed incorrect my_... instead of .._template entries for subsystem and component.
	
	Revision 1.4  2004/07/16 14:56:55  flammer
	Corrected input path of build.properties.
	
	Revision 1.3  2004/07/06 20:35:31  flammer
	Update of configure & targets.
	
	Revision 1.2  2004/06/18 12:30:12  flammer
	Updating tags to be able to automatically add component via script.
	
	Revision 1.1.1.1  2004/06/07 16:00:38  flammer
	Added template for org.glite subsystem.
	
	
-->

<project name="lb-utils" default="dist">

	<description>
		Ant build file to build the lb-utils subsystem.
	</description>
		
	<!-- =========================================
		 Builds the GLite lb-utils subsystem
	     ========================================= -->

	<!-- Import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- Import subsystem build properties, 
	                      subsystem properties & 
	                      subsystem common properties -->
	<import file="./project/properties.xml" />

	<!-- Import global build properties and global properties -->
	<import file="${global.properties.file}" />
				
	<!-- =========================================
		 Load dependencies properties files (order is important) 
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${subsystem.dependencies.file}"/>
	<property file="${global.dependencies.file}"/>	

	<!-- =========================================
		 Load configuration definitions
	     ========================================= -->
	<import file="${global.configure.options.file}"/>
			
	<!-- =========================================
		 Import global task definitions
	     ========================================= -->
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
	         Import global compiler definitions
  	     ========================================= -->
	<import file="${global.compilerdefs.file}" />
		
	<!-- =========================================
		 Import targets 
	     ========================================= -->
	<import file="${global.targets-common.file}"/>
	
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
	<property file="${module.build.file}"/>
		
	
	<!-- ===============================================
		  Public common targets
	     =============================================== -->

	<target name="localinit" depends="envcheck">

		<echo> Preparing directories ... </echo>
		
		<mkdir dir="${stage.bin.dir}" />
		<mkdir dir="${stage.lib.dir}" />
		<mkdir dir="${stage.java.dir}" />
		<mkdir dir="${stage.inc.dir}" />
		<mkdir dir="${stage.int.dir}" />

		<mkdir dir="${dist.dir}" />

	</target>

	<target name="init" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="init"/>
		</antcall>
	</target>

	<target name="checkstyle" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="checkstyle"/>
		</antcall>
	</target>

	<target name="compile" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compile"/>
		</antcall>
	</target>

	<target name="compiletest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compiletest"/>
		</antcall>
	</target>

	<target name="unittest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unittest"/>
		</antcall>
	</target>

	<target name="unitcoverage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unitcoverage"/>
		</antcall>
	</target>

	<target name="stage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="stage"/>
		</antcall>
	</target>

	<target name="dist" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="dist"/>
		</antcall>
	</target>

	<target name="install" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="install"/>
		</antcall>
	</target>

	<target name="doc" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="doc"/>
		</antcall>
	</target>

	<target name="all" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="all"/>
		</antcall>
	</target>

	<target name="clean">

		<property name="offline.repository" value="true" />
		<antcall target="buildmodules">
			<param name="target" value="clean"/>
		</antcall>

		<delete dir="${module.bin.dir}" />
		<delete dir="${module.lib.dir}" />
		<delete dir="${module.autosrc.dir}" />
		<delete dir="${module.autodoc.dir}" />
		<delete dir="${module.test.reports.dir}" />

	</target>

	<target name="cleanAll" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="cleanAll"/>
		</antcall>
	</target>

	<!-- ===============================================
		 Private targets
	     =============================================== -->

	<!-- ===============================================
		 Modules proxy targets
	     =============================================== -->

	<!-- component targets definitions tag = do not remove = -->

	<if>
		<isset property="setenvonly"/>
		<then>
			<property name="lbonly" value="yes"/>
		</then>
	</if>

	<target name="db" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb-utils.subsystem.dir}.db" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb-utils.subsystem.dir}.db"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

<!--	<target name="server-bones" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb-utils.subsystem.dir}.server-bones" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb-utils.subsystem.dir}.server-bones"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="jobid" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb-utils.subsystem.dir}.jobid" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb-utils.subsystem.dir}.jobid"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="trio" unless="setenvonly" depends="envset">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb-utils.subsystem.dir}.trio" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} &quot;-Dsmall.memory=true&quot; &quot;-Dbootstrap=${bootstrap}&quot; &quot;-Dfailonerror=${failonerror}&quot; &quot;-Ddo.cvs.tag=${do.cvs.tag}&quot;"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb-utils.subsystem.dir}.trio"
	                    	     target="${target}"
	                    	     inheritall="false" />
			</else>
		</if>
	</target>-->

	<!-- Main proxy -->
<!--	<target name="buildmodules" depends="envset,
					     db, 
					     jobid,
					     trio,
					     server-bones">-->
	<target name="buildmodules" depends="envset,
					     db">
		<echo append="true" file="${global.project.dir}/cruisecontrol-stub.xml">
	&lt;project name="${subsystem.name}" type="post-subsystem" packageName="${global.prefix}-${subsystem.prefix}"/&gt;
		</echo>
	</target>

</project>
